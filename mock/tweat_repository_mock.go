// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/tweat_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/sugartr3e/tweat/domain/entity"
)

// MockTweatRepository is a mock of TweatRepository interface.
type MockTweatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTweatRepositoryMockRecorder
}

// MockTweatRepositoryMockRecorder is the mock recorder for MockTweatRepository.
type MockTweatRepositoryMockRecorder struct {
	mock *MockTweatRepository
}

// NewMockTweatRepository creates a new mock instance.
func NewMockTweatRepository(ctrl *gomock.Controller) *MockTweatRepository {
	mock := &MockTweatRepository{ctrl: ctrl}
	mock.recorder = &MockTweatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweatRepository) EXPECT() *MockTweatRepositoryMockRecorder {
	return m.recorder
}

// AddLike mocks base method.
func (m *MockTweatRepository) AddLike(ctx context.Context, tweatID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", ctx, tweatID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLike indicates an expected call of AddLike.
func (mr *MockTweatRepositoryMockRecorder) AddLike(ctx, tweatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockTweatRepository)(nil).AddLike), ctx, tweatID, userID)
}

// DeleteLike mocks base method.
func (m *MockTweatRepository) DeleteLike(ctx context.Context, tweatID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", ctx, tweatID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockTweatRepositoryMockRecorder) DeleteLike(ctx, tweatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockTweatRepository)(nil).DeleteLike), ctx, tweatID, userID)
}

// GetAll mocks base method.
func (m *MockTweatRepository) GetAll(ctx context.Context, userID string) (entity.Tweats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].(entity.Tweats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTweatRepositoryMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTweatRepository)(nil).GetAll), ctx, userID)
}

// ToggleLike mocks base method.
func (m *MockTweatRepository) ToggleLike(ctx context.Context, tweatID, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleLike", ctx, tweatID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleLike indicates an expected call of ToggleLike.
func (mr *MockTweatRepositoryMockRecorder) ToggleLike(ctx, tweatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleLike", reflect.TypeOf((*MockTweatRepository)(nil).ToggleLike), ctx, tweatID, userID)
}
